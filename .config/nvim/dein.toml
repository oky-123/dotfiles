[[plugins]]
repo='Shougo/dein.vim'

[[plugins]] # color scheme
repo='w0ng/vim-hybrid'
hook_add='''
set background=dark
colorscheme hybrid
'''

[[plugins]]
repo='scrooloose/nerdtree'
hook_add='''
let NERDTreeShowHidden=1
nnoremap <silent><C-e> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo='Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo='itchyny/lightline.vim'
hook_add='''
let g:lightline = {
  \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
  \ }
\ }
'''

[[plugins]]
repo='nathanaelkane/vim-indent-guides'
hook_source='''
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
'''

## Git gutter
[[plugins]]
repo= 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_map_keys = 0
let g:gitgutter_sign_priority = 1
'''

## Git fugitive
[[plugins]]
repo= 'tpope/vim-fugitive'

[[plugins]]
repo= 'easymotion/vim-easymotion'
hook_add='''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
map s <Plug>(easymotion-overwin-f)
map s <Plug>(easymotion-overwin-f2)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
'''

[[plugins]]
repo='neoclide/coc.nvim'
rev='release'
merged='0'
hook_add='''
set nobackup
set nowritebackup
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
xmap <leader>ca  <Plug>(coc-codeaction-selected)
nmap <leader>ca  <Plug>(coc-codeaction-selected)
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
" remap for complete to use tab and <cr>
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

hi CocSearch ctermfg=12 guifg=#18A3FF
hi CocMenuSel ctermbg=109 guibg=#13354A
'''

[[plugins]]
repo='simeji/winresizer'
hook_add='''
let g:winresizer_start_key = '<C-t>'
'''

[[plugins]]
repo = 'mattn/vim-maketable'

[[plugins]]
repo = 'oky-123/marksign.vim'
hook_add='''
let g:marksign_marks_to_show = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
'''

[[plugins]]
repo = 'mattn/vim-sqlfmt'
hook_add='''
let g:sqlfmt_program = "sqlformat --comma_first true -r -k upper -o %s -"
nmap <buffer><leader>fs <Plug>(sqlfmt)
'''

[[plugins]]
repo='tpope/vim-rails'

[[plugins]]
repo='junegunn/fzf'
build="./install --all"
merged=0

[[plugins]]
repo='junegunn/fzf.vim'
depends='fzf'
hook_add='''
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>e :Files<CR>
nnoremap <silent> <Leader>g :GFiles<CR>
nnoremap <silent> <Leader>r :Rg<CR>
let g:fzf_buffers_jump = 1
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--bind', 'change:top']}), <bang>0)
'''

[[plugins]]
repo='antoinemadec/coc-fzf'
